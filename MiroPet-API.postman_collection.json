{
  "info": {
    "name": "MiroPet API",
    "description": "Complete API collection for MiroPet - Pet store API with Express.js, TypeScript, and MongoDB",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "miropet-api-collection",
    "version": {
      "major": 1,
      "minor": 2,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "customerToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "cartSessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderNumber",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the API server is running"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login Initial Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('adminToken', response.data.token);",
                  "        console.log('Initial admin token saved:', response.data.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"miropet@miro.com\",\n  \"password\": \"miro@2024!petShop\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with the auto-created initial admin account"
          },
          "response": []
        },
        {
          "name": "Register Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('customerToken', response.data.token);",
                  "        console.log('Customer token saved:', response.data.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new customer account (role is automatically set to customer)"
          },
          "response": []
        },
        {
          "name": "Login Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('customerToken', response.data.token);",
                  "        console.log('Customer token updated:', response.data.token);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login as customer"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Get authenticated user's profile"
          },
          "response": []
        },
        {
          "name": "Create Admin User (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('New admin created by:', response.data.createdBy.email);",
                  "    console.log('New admin email:', response.data.user.email);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Secondary Admin\",\n  \"email\": \"admin2@miropet.com\",\n  \"password\": \"SecureAdmin@2024!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "admin"]
            },
            "description": "Create a new admin user (requires admin authentication and strong password)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Get all products (public endpoint)"
          },
          "response": []
        },
        {
          "name": "Get Products with Pagination & Filtering",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?page=1&limit=5&category=food&sortBy=price&sortOrder=asc&search=dog",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "Items per page"
                },
                {
                  "key": "category",
                  "value": "food",
                  "description": "Filter by category"
                },
                {
                  "key": "sortBy",
                  "value": "price",
                  "description": "Sort field (price, createdAt, name, updatedAt)"
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "Sort order (asc, desc)"
                },
                {
                  "key": "search",
                  "value": "dog",
                  "description": "Search in name, description, brand"
                }
              ]
            },
            "description": "Get products with pagination, filtering, and search"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Get a specific product by ID"
          },
          "response": []
        },
        {
          "name": "Create Product (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.product && response.data.product._id) {",
                  "        pm.collectionVariables.set('productId', response.data.product._id);",
                  "        console.log('Product ID saved:', response.data.product._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"غذای خشک سگ پریمیوم\",\n  \"description\": \"غذای کامل و مغذی برای سگ‌های بزرگسال\",\n  \"category\": [\"غذا\", \"سگ\"],\n  \"brand\": \"پت نوتریشن\",\n  \"variations\": [\n    {\n      \"color\": \"قهوه‌ای\",\n      \"size\": \"کوچک\",\n      \"price\": 150000,\n      \"weight\": \"2 کیلوگرم\",\n      \"stock\": 25,\n      \"images\": [\"https://example.com/dog-food-small.jpg\"]\n    },\n    {\n      \"color\": \"قهوه‌ای\",\n      \"size\": \"متوسط\",\n      \"price\": 280000,\n      \"weight\": \"5 کیلوگرم\",\n      \"stock\": 15,\n      \"images\": [\"https://example.com/dog-food-medium.jpg\"]\n    }\n  ],\n  \"isFeatured\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create a new product (requires admin authentication)"
          },
          "response": []
        },
        {
          "name": "Create Cat Toy Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"اسباب بازی تعاملی گربه\",\n  \"description\": \"گربه شما را ساعت‌ها سرگرم نگه دارد\",\n  \"category\": [\"اسباب بازی\", \"گربه\"],\n  \"brand\": \"کت پلی\",\n  \"variations\": [\n    {\n      \"color\": \"آبی\",\n      \"price\": 45000,\n      \"stock\": 30,\n      \"images\": [\"https://example.com/cat-toy-blue.jpg\"]\n    },\n    {\n      \"color\": \"قرمز\",\n      \"price\": 45000,\n      \"stock\": 20,\n      \"images\": [\"https://example.com/cat-toy-red.jpg\"]\n    }\n  ],\n  \"isFeatured\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create another product example"
          },
          "response": []
        },
        {
          "name": "Update Product (Admin Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"variations\": [\n    {\n      \"color\": \"قهوه‌ای\",\n      \"size\": \"کوچک\",\n      \"price\": 140000,\n      \"weight\": \"2 کیلوگرم\",\n      \"stock\": 30,\n      \"images\": [\"https://example.com/dog-food-small-updated.jpg\"]\n    }\n  ],\n  \"isFeatured\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Update an existing product (requires admin authentication)"
          },
          "response": []
        },
        {
          "name": "Delete Product (Admin Only)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Delete a product (requires admin authentication)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cart Management",
      "item": [
        {
          "name": "Get Cart (Guest)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.sessionId) {",
                  "        pm.collectionVariables.set('cartSessionId', response.data.sessionId);",
                  "        console.log('Cart session ID saved:', response.data.sessionId);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "cart-session-id",
                "value": "{{cartSessionId}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart"]
            },
            "description": "Get cart for guest user (uses session ID header)"
          },
          "response": []
        },
        {
          "name": "Get Cart (Authenticated)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart"]
            },
            "description": "Get cart for authenticated user"
          },
          "response": []
        },
        {
          "name": "Add Item to Cart (Guest)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.sessionId) {",
                  "        pm.collectionVariables.set('cartSessionId', response.data.sessionId);",
                  "        console.log('Cart session ID updated:', response.data.sessionId);",
                  "    }",
                  "    if (response.data && response.data.cart) {",
                  "        console.log('Cart total items:', response.data.cart.totalItems);",
                  "        console.log('Cart total price:', response.data.cart.totalPrice);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "cart-session-id",
                "value": "{{cartSessionId}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"variationIndex\": 0,\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/add",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "add"]
            },
            "description": "Add item to cart for guest user"
          },
          "response": []
        },
        {
          "name": "Add Item to Cart (Authenticated)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"variationIndex\": 1,\n  \"quantity\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/add",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "add"]
            },
            "description": "Add item to cart for authenticated user"
          },
          "response": []
        },
        {
          "name": "Update Cart Item Quantity",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"variationIndex\": 0,\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/update",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "update"]
            },
            "description": "Update quantity of item in cart"
          },
          "response": []
        },
        {
          "name": "Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"variationIndex\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/remove",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "remove"]
            },
            "description": "Remove specific item from cart"
          },
          "response": []
        },
        {
          "name": "Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/cart/clear",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "clear"]
            },
            "description": "Clear all items from cart"
          },
          "response": []
        },
        {
          "name": "Merge Guest Cart with User Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionId\": \"{{cartSessionId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/cart/merge",
              "host": ["{{baseUrl}}"],
              "path": ["api", "cart", "merge"]
            },
            "description": "Merge guest cart with authenticated user cart after login"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "Create Order from Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.order) {",
                  "        pm.collectionVariables.set('orderId', response.data.order._id);",
                  "        pm.collectionVariables.set('orderNumber', response.data.order.orderNumber);",
                  "        console.log('Order ID saved:', response.data.order._id);",
                  "        console.log('Order Number saved:', response.data.order.orderNumber);",
                  "        console.log('Total Amount:', response.data.order.totalAmount);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"fullName\": \"جان دو\",\n    \"phone\": \"09123456789\",\n    \"street\": \"خیابان ولیعصر، پلاک 123\",\n    \"city\": \"تهران\",\n    \"postalCode\": \"1234567890\",\n    \"country\": \"ایران\",\n    \"notes\": \"طبقه دوم، واحد 5\"\n  },\n  \"paymentMethod\": \"cash_on_delivery\",\n  \"customerNotes\": \"لطفاً با احتیاط حمل کنید\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Create order from current cart items"
          },
          "response": []
        },
        {
          "name": "Get User Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Orders per page"
                }
              ]
            },
            "description": "Get authenticated user's orders with pagination"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            },
            "description": "Get specific order details by order ID"
          },
          "response": []
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customerToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "cancel"]
            },
            "description": "Cancel order (only pending/confirmed orders can be cancelled)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Order Management (Admin)",
      "item": [
        {
          "name": "Get All Orders (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/all?page=1&limit=20&status=pending",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "admin", "all"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Orders per page"
                },
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by order status",
                  "disabled": true
                },
                {
                  "key": "paymentStatus",
                  "value": "pending",
                  "description": "Filter by payment status",
                  "disabled": true
                }
              ]
            },
            "description": "Get all orders with filtering and pagination (Admin only)"
          },
          "response": []
        },
        {
          "name": "Update Order Status (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\",\n  \"trackingNumber\": \"TRK123456789\",\n  \"adminNotes\": \"Order confirmed and ready for processing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "admin", "{{orderId}}", "status"]
            },
            "description": "Update order status, tracking number, and admin notes (Admin only)"
          },
          "response": []
        },
        {
          "name": "Mark Order as Shipped (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"shipped\",\n  \"trackingNumber\": \"POST789123456\",\n  \"adminNotes\": \"Shipped via Iran Post Express\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "admin", "{{orderId}}", "status"]
            },
            "description": "Mark order as shipped with tracking number (Admin only)"
          },
          "response": []
        },
        {
          "name": "Mark Order as Delivered (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"delivered\",\n  \"adminNotes\": \"Successfully delivered to customer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "admin", "{{orderId}}", "status"]
            },
            "description": "Mark order as delivered (Admin only)"
          },
          "response": []
        },
        {
          "name": "Get Order Statistics (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "admin", "stats"]
            },
            "description": "Get order statistics including revenue and counts (Admin only)"
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{adminToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ]
}
